#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  arfedy.py
#
#  Copyright 2016 youcef sourani <youcef.m.sourani@gmail.com>
#
#  www.arfedora.blogspot.com
#
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
import os
import subprocess
import platform
import sys
from talwin import talwin


home=os.getenv("HOME")
dirname=os.path.abspath(os.path.dirname(__file__))
arch=platform.machine()
gb=True


def get_distro_name(location="/etc/os-release"):
    result=""
    if not os.path.isfile(location):
        return None
    with open(location) as myfile:
        for l in myfile:
            if l.startswith("ID") and not l.startswith("ID_"):
                result=l.split("=",1)[1].strip()
    return result.replace("\"","").replace("'","")

def get_distro_name_like(location="/etc/os-release"):
    result=""
    if not os.path.isfile(location):
        return None
    with open(location) as myfile:
        for l in myfile:
            if l.startswith("ID_LIKE") :
                result=l.split("=",1)[1].strip()
    if not result:
        result = get_distro_name(location)
    return result.replace("\"","").replace("'","")
    
def get_distro_version(location="/etc/os-release"):
    result=""
    if not os.path.isfile(location):
        return None
    with open(location) as myfile:
        for l in myfile:
            if l.startswith("VERSION_ID"):
                result=l.split("=",1)[1].strip()
    return result.replace("\"","").replace("'","")



d_name=get_distro_name_like()
d_version=get_distro_version()

def init_check():
    versions=["25","26","27","28","29","30","32","33"]
    if d_name!="ojuba":
        if d_name!="fedora":
            sys.exit("Fedora Not Found.")
        
    if not sys.version.startswith("3"):
        sys.exit("Use Python 3 Try run python3 arfedy.py")
        
    if  d_version not in versions:
        sys.exit("Distro Version %s Not Supported."%d_version)
init_check()


def check_root():
    if os.getuid()!=0:
        return main("\n\nRun Script With Root Permissions.\n\n\nTry :\n\n1-sudo python3 arfedy\n\n2-su -c \"python3 arfedy\"\n\n")
        
        
def __get_kernel_name():
    kernel=platform.release()
    if arch=="i686":
        if kernel.endswith("E"):
            return kernel[0:-4]
        return kernel
    else:
        return kernel

def add_keepcache():
    check_root()
    subprocess.call("dnf config-manager --setopt=keepcache=True --save",shell=True)

def add_fastestmirror():
    check_root()
    subprocess.call("dnf config-manager --setopt=fastestmirror=True --save",shell=True)
              
def install_arabicfonts():
    check_root()
    check=subprocess.call("dnf -y --best install dejavu-sans-fonts dejavu-sans-mono-fonts kacst-art-fonts kacst-book-fonts kacst-decorative-fonts kacst-digital-fonts kacst-farsi-fonts kacst-letter-fonts kacst-naskh-fonts kacst-office-fonts kacst-one-fonts kacst-pen-fonts kacst-poster-fonts kacst-qurn-fonts kacst-screen-fonts kacst-title-fonts kacst-titlel-fonts paktype-naqsh-fonts paktype-tehreer-fonts sil-lateef-fonts sil-scheherazade-fonts google-noto-kufi-arabic-fonts google-noto-naskh-arabic-fonts google-noto-naskh-arabic-ui-fonts google-noto-sans-old-south-arabian-fonts",shell=True)
    if check!=0:
            return main("Error Check Your Connection || Check dnf.")
    

def install_googlechrome():
    check_root()
    global gb
    gb=True
    repo="""
[google-chrome]
name=google-chrome
baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
enabled=1
gpgcheck=1
gpgkey=https://dl.google.com/linux/linux_signing_key.pub
"""
    if arch=="x86_64":
        with open("/etc/yum.repos.d/google-chrome.repo","w") as myfile:
            myfile.write(repo)
        
        check=subprocess.call("dnf -y --best install google-chrome-stable",shell=True)
        if check!=0:
                return main("Error Check Your Connection || Check dnf.")
    else:
        gb=False
        talwin("Google Chrome Support GNU/LINUX 64bit Only.","red")

def __install_kernel_headers_devel(d=False):
    check_root()
    check=subprocess.call("dnf -y --best install kernel kernel-devel  kernel-headers \
    @c-development @development-tools",shell=True)
    if check!=0:
        return main("Error Check Your Connection || Check dnf || Update And Reboot System And Try Again.")
    else:
        if d:
            return main("Success ,Restart System And Boot From Newest Kernel.")


def installvirtuablox():
    check_root()
    __install_kernel_headers_devel()
    install_rpmfusionrepos()
    subprocess.call("dnf remove VirtualBox-5.0 VirtualBox-5.1 VirtualBox-5.2 VirtualBox-5.3 VirtualBox-6.0 VirtualBox-6.1 VirtualBox-6.2 VirtualBox-6.3 VirtualBox-6.4 VirtualBox-6.5 VirtualBox-6.6 VirtualBox-6.7 --noautoremove \
    --setop=strict=False -y --best",shell=True)
    check=subprocess.call("dnf -y --best install VirtualBox",shell=True)
    if check!=0:
        return main("Error Check Your Connection || Check dnf.")
        
    check=subprocess.call("usermod -G vboxusers -a $USER",shell=True)
    if check!=0:
        return main("Error Add USER To vboxusers Group.")
    
    talwin("\nPlease Wait...\n","blue")
    subprocess.call("akmods --force",shell=True)
    subprocess.call("systemctl restart systemd-modules-load",shell=True)
    

def install_compressp():
    check_root()
    check=subprocess.call("dnf install  --best -y zip p7zip gzip cpio unar p7zip-plugins",shell=True)
    if check!=0:
        return main("Error Check Your Connection || Check dnf.")
    
def install_rpmfusionrepos():
    check_root()
    check=subprocess.call("dnf install  --best -y --nogpgcheck  \
    http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-%s.noarch.rpm \
    http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-%s.noarch.rpm"%(d_version,d_version),shell=True)
    if check!=0:
        return main("Error Check Your Connection || Check dnf.")
    
def install_codecs():
    check_root()
    install_rpmfusionrepos()
    if int(d_version)>27:
        check=subprocess.call("dnf install compat-ffmpeg28 gstreamer{1,}-{plugin-crystalhd,ffmpeg,plugins-{good,ugly,bad{,-free,-nonfree,-freeworld,-extras}{,-extras}}} libmpg123 lame-libs gstreamer1-libav gstreamer-plugins-espeak xine-lib xine-lib-devel xine-lib-extras gstreamer-plugins-fc gstreamer-rtsp lame gstreamer-ffmpeg ffmpeg x264 faad2 flac amrnb amrwb gstreamer1-plugins-bad-free-gtk  ffmpeg-libs lsdvd libdvdread libdvdnav  gstreamer1-plugins-good-extras gstreamer1-vaapi  -y --best --setopt=strict=0",shell=True)
        if check!=0:
            return main("Error Check Your Connection || Check dnf.")
    else:
        check=subprocess.call("dnf install gstreamer1-plugins-{bad-\*,good-\*,base} gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel  -y --best --setopt=strict=0",shell=True)
        if check!=0:
            return main("Error Check Your Connection || Check dnf.")
        check=subprocess.call("dnf install lame\* --exclude=lame-devel  -y --best --setopt=strict=0",shell=True)
        if check!=0:
            return main("Error Check Your Connection || Check dnf.")
        subprocess.call("dnf config-manager --set-enabled fedora-cisco-openh264",shell=True)
        check = subprocess.call("dnf install --best -y gstreamer1-plugin-openh264 mozilla-openh264",shell=True)
        if check!=0:
            print("Clean metadata.")
            subprocess.call("dnf clean dbcache",shell=True)
            subprocess.call("dnf clean metadata",shell=True)
            print("Done.")
            subprocess.call("dnf install --best -y gstreamer1-plugin-openh264 mozilla-openh264 --setopt=strict=0",shell=True)
        
def install_torrent_client():
    check_root()
    check=subprocess.call("dnf install  --best -y qbittorrent",shell=True)
    if check!=0:
        return main("Error Check Your Connection || Check dnf.")

def add_user_to_sudoers():
    if os.getuid()!=0:
        talwin("\nPlease Enter Root Password.\n","red")
        check=subprocess.call("su -c \"usermod -a -G wheel %s\" "%os.getenv("LOGNAME"),shell=True)
        if check!=0:
            return main("Add User To sudoers Fail.")
    else:
        subprocess.call("usermod -a -G wheel %s"%os.getenv("LOGNAME"),shell=True)
    
    
def msg(m):
    while True:
        subprocess.call("clear")
        print()
        talwin (m,"red")
        talwin("\nY To Continue || N To Back || Q To Quit : \n-","blue",end="")
        y_n=input().strip()
        if y_n=="Y" or y_n=="y":
            break
        elif y_n=="N" or y_n=="n":
            return main()
        elif y_n=="q" or y_n=="Q":
            sys.exit("\nBye...\n")


def install_broadcom_driver():
    __install_kernel_headers_devel()
    install_rpmfusionrepos()
    check=subprocess.call("dnf install akmod-wl -y --best",shell=True)
    if check!=0:
        return main("Install Broadcom WiFi Driver Fail.")



def set_selinux_permissive():
    check_root()
    result = ""
    b = False
    with open("/etc/selinux/config","r") as myfile: 
        for line in myfile.readlines():
            line = line.strip() 
            if line.replace(" ","").startswith("SELINUX="):
                if line.split("=",1)[1].strip() == "enforcing":
                    line = "SELINUX=permissive"
                    b = True
            result+=line+"\n"

        
    if not b:
        return main("Nothing to do.")
    else:
        with open("/etc/selinux/config","w") as myfile:
            myfile.write(result)

     
def main(ms=""):
    subprocess.call("clear")
    talwin("\nhttp://www.arfedora.blogspot.com/","red")
    if len(ms)!=0:
        ms="((((%s))))"%ms
    while True:
        talwin("\nChoice Number :\n","blue")
        print("\
1-Install RPMFUSION Repos.\t\t\t\t\t\t \
2-Install Codecs.\n\n\n\
3-Install kernel-heasers kernel-devel.\t\t\t\t\t \
4-Install VirtualBox From RPMFUSION Repos.\n\n\n\
5-Install Google Chrome (64bit Only).\t\t\t\t\t \
6-Add KeepCache To DNF.\n\n\n\
7-Add FastestMirror To DNF.\t\t\t\t\t\t \
8-Install Arabic Fonts.\n\n\n\
9-Install Compression Programs unzip/unar... .\t\t\t\t \
10-Install Torrent Client qbittorrent.\n\n\n\
11-Add User To Sudoers.\t\t\t\t\t\t\t \
12-Install Broadcom WiFi Driver.\n\n\n\
13-Set Selinux To Permissive (IF NOT DISABLED).\t\t\t\t \
14-Install All (Without Drivers And Selinux).")
        
        talwin("\n%s\n"%ms,"red")
        talwin("Choice Number || q to Exit.\n-","blue",end="")
        answer=input().strip()
        ms=""
        if answer=="1":
            msg("Install RPMFUSION Repos.")
            install_rpmfusionrepos()
            return main("Install RPMFUSION Repos Success.")
        elif answer=="2":
            msg("Install Codecs.")
            install_codecs()
            return main("Install Codecs Success.")

        elif answer=="3":
            msg("Install kernel-heasers kernel-devel.")
            __install_kernel_headers_devel(True)

            
        elif answer=="4":
            msg("Install VirtualBox From RPMFUSION Repos.")
            installvirtuablox()
            return main("\nInstall VirtualBox Success Please Reboot Your PC.\n")
            
        elif answer=="5":
            msg("Install Google Chrome.")
            install_googlechrome()
            if gb:
                return main("Install Google Chrome Success.")
            return  main("Google Chrome Support GNU/LINUX 64bit Only.")
        elif answer=="6":
            msg("Add KeepCache To DNF.")
            add_keepcache()
            return main("Add KeepCache Option Success.")
            
        elif answer=="7":
            msg("Add FastestMirror To DNF.")
            add_fastestmirror()
            return main("Add FastestMirror Option Success.")
            
            
        elif answer=="8":
            msg("Install Arabic Fonts.")
            install_arabicfonts()
            return main("Install Arabic Fonts Success.")
            
        elif answer=="9":
            msg("Install Compression Programs unzip/unar... .")
            install_compressp()
            return main("Install Compression Programs Success.")
            
        elif answer=="10":
            msg("Install Torrent Client deluge.")
            install_torrent_client()
            return main("Install deluge Success.")

        elif answer=="11":
            msg("Add User To Sudoers.")
            add_user_to_sudoers()
            return main("Success Please Restart You PC.")

        elif answer=="12":
            msg("Install Broadcom WiFi Driver.")
            install_broadcom_driver()
            return main("Install Broadcom WiFi Driver Success Please Restart You PC.")

        elif answer=="13":
            msg("Set Selinux To Permissive.")
            set_selinux_permissive()
            return main("Success Please Restart You PC.")

        elif answer=="14":
            msg("Install All.")
            install_codecs()
            installvirtuablox()
            install_googlechrome()
            add_keepcache()
            add_fastestmirror()
            install_arabicfonts()
            install_compressp()
            install_torrent_client()
            return main("Install All Success.")
            
        elif answer=="q" or answer=="Q":
            sys.exit("\nBye...\n")
        
    

if __name__=="__main__":
    main()


